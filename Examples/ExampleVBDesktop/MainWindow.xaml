<!--
<copyright file="MainWindow.xaml" owner="Daniel Kopp">
  Copyright 2015-2016 Daniel Kopp

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
</copyright>
<author name="Daniel Kopp" email="dak@nerdyduck.de" />
<assembly name="ExampleVBDesktop">
  Example application for NerdyDuck.ParameterValidation library.
</assembly>
<file name="MainWindow.xaml" date="2016-01-19">
  The main application window.
</file>
-->
	<Window x:Class="MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExampleVBDesktop"
        mc:Ignorable="d"
        Title="Settings Viewer" Height="350" Width="525" Loaded="Window_Loaded"
				DataContext="{Binding RelativeSource={RelativeSource Self}}">
	<Window.Resources>
		<local:ParameterDataTypeTemplateSelector x:Key="SettingsTemplateSelector" />
		<local:DateTimeToOffsetConverter x:Key="DateTimeConv" />
		<local:DoubleObjectInt32Converter x:Key="DoubleIntConv" />
		<Style TargetType="{x:Type TextBox}">
			<Style.Triggers>
				<Trigger Property="Validation.HasError" Value="true">
					<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" /><!-- Displays the first error message as a tooltip on a textbox. Needs to be done for all controls used to display a settings value. -->
				</Trigger>
			</Style.Triggers>
		</Style>
	</Window.Resources>
	<Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="8" Grid.IsSharedSizeScope="True"><!-- IsSharedSizeScope to unify the width of the settings labels -->
		<Grid.RowDefinitions>
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		<!-- SettingsTemplateSelector select the appropriate template from the ListViews's resources below. IsSharedSizeScope to unify the width of the settings labels. -->
		<ListView Name="lvSettings" Grid.Row="0" ItemsSource="{Binding Path=Settings}" ItemTemplateSelector="{StaticResource SettingsTemplateSelector}" Grid.IsSharedSizeScope="True">
			<ListView.ItemContainerStyle>
				<!-- Style change is necessary so ListView items use the whole width of the control. -->
				<Style TargetType="ListViewItem">
					<Setter Property="HorizontalContentAlignment" Value="Stretch" />
				</Style>
			</ListView.ItemContainerStyle>
			<ListView.Resources>
				<!-- Template for String data type -->
				<DataTemplate x:Key="StringListItemTemplate">
					<Grid HorizontalAlignment="Stretch">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" SharedSizeGroup="LabelGroup" /><!-- SharedSizeGroup to unify width of settings labels. -->
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<TextBlock Text="{Binding DisplayName}" ToolTip="{Binding Name}" Grid.Column="0" Margin="0,0,8,0" />
						<!-- NotifyOnValidationError, ValidatesOnNotifyDataErrors required to activate and display validation and its errors. -->
						<TextBox Text="{Binding Path=Value, Mode=TwoWay, NotifyOnValidationError=True, ValidatesOnNotifyDataErrors=True}" Grid.Column="1" HorizontalAlignment="Stretch" />
					</Grid>
				</DataTemplate>
				<DataTemplate x:Key="IntegerListItemTemplate">
					<Grid HorizontalAlignment="Stretch">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" SharedSizeGroup="LabelGroup" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<TextBlock Text="{Binding DisplayName}" ToolTip="{Binding Name}" Grid.Column="0" Margin="0,0,8,0" />
						<TextBlock Text="{Binding Value}" Grid.Column="1" Margin="0,0,8,0" />
						<!-- Converter is required, because WPF data binding cannot implicitly convert values boxed in an object property, so integers returned from the setting's properties need to be converted into doubles, and vice versa -->
						<!-- MinimumValueConstraint and MaximumValueConstraint set the boundaries of the Slider, Step defines the LargeChange value. IsSnapToTickEnabled="True" and TickFrequency="1" is required so only integer values are returned as Value, no fractions. -->
						<Slider Grid.Column="2" HorizontalAlignment="Stretch" Value="{Binding Path=Value, Mode=TwoWay, NotifyOnValidationError=True, ValidatesOnNotifyDataErrors=True, Converter={StaticResource DoubleIntConv}}" Minimum="{Binding MinimumValue, Converter={StaticResource DoubleIntConv}}" Maximum="{Binding MaximumValue, Converter={StaticResource DoubleIntConv}}" SmallChange="1" LargeChange="{Binding Step, Converter={StaticResource DoubleIntConv}}" IsSnapToTickEnabled="True" TickFrequency="1" TickPlacement="None" />
					</Grid>
				</DataTemplate>
				<DataTemplate x:Key="EnumListItemTemplate">
					<Grid HorizontalAlignment="Stretch">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" SharedSizeGroup="LabelGroup" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<TextBlock Text="{Binding DisplayName}" ToolTip="{Binding Name}" Grid.Column="0" Margin="0,0,8,0" />
						<!-- Drop-down list of ComboBox is filled via EnumValues. The string key is displayed, while the returned value is the actual enumeration value. -->
						<!-- Advanced versions of this might instead display the localized data of DisplayAttributes decorating the enumeration. -->
						<ComboBox SelectedValue="{Binding Path=Value, Mode=TwoWay, NotifyOnValidationError=True, ValidatesOnNotifyDataErrors=True}" ItemsSource="{Binding EnumValues}" DisplayMemberPath="Key" SelectedValuePath="Value" Grid.Column="1" />
					</Grid>
				</DataTemplate>
				<DataTemplate x:Key="DateTimeListItemTemplate">
					<Grid HorizontalAlignment="Stretch">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" SharedSizeGroup="LabelGroup" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						<TextBlock Text="{Binding DisplayName}" ToolTip="{Binding Name}" Grid.Column="0" Margin="0,0,8,0" />
						<!-- Converter is necessary because DatePicker only handles DateTime, but not DateTimeOffset -->
						<DatePicker SelectedDate="{Binding Path=Value, Mode=TwoWay, NotifyOnValidationError=True, ValidatesOnNotifyDataErrors=True, Converter={StaticResource DateTimeConv}}" Grid.Column="1" />
					</Grid>
				</DataTemplate>
			</ListView.Resources>
		</ListView>

		<StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" FlowDirection="RightToLeft" Grid.Row="1" Margin="0,8,0,0">
			<Button Name="btnSave" Content="Save" Click="btnSave_Click" Margin="0,0,8,0" Padding="24,4" />
			<Button Name="btnReset" Content="Reset" Click="btnReset_Click"  Margin="0,0,8,0" Padding="24,4" />
			<Button Name="btnOriginal" Content="Sample values" Click="btnOriginal_Click"  Margin="0,0,8,0" Padding="24,4" />
		</StackPanel>

	</Grid>
</Window>
