<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which assemblies to include from solution and
				 project documentation sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>dbbc3d06-3173-42b6-ad52-95e4e34cd8cc</ProjectGuid>
    <SHFBSchemaVersion>2015.6.5.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual Studio adds them anyway -->
    <AssemblyName>ParameterValidationDoc</AssemblyName>
    <RootNamespace>ParameterValidationDoc</RootNamespace>
    <Name>ParameterValidationDoc</Name>
    <!-- SHFB properties -->
    <FrameworkVersion>.NET Framework 4.6</FrameworkVersion>
    <OutputPath>.\Help\</OutputPath>
    <HtmlHelpName>ParameterValidationDoc</HtmlHelpName>
    <Language>en-US</Language>
    <TransformComponentArguments>
      <Argument Key="logoFile" Value="Help.png" xmlns="" />
      <Argument Key="logoHeight" Value="" xmlns="" />
      <Argument Key="logoWidth" Value="" xmlns="" />
      <Argument Key="logoAltText" Value="" xmlns="" />
      <Argument Key="logoPlacement" Value="left" xmlns="" />
      <Argument Key="logoAlignment" Value="left" xmlns="" />
      <Argument Key="maxVersionParts" Value="" xmlns="" />
    </TransformComponentArguments>
    <BuildAssemblerVerbosity>OnlyWarningsAndErrors</BuildAssemblerVerbosity>
    <HelpFileFormat>Markdown</HelpFileFormat>
    <IndentHtml>False</IndentHtml>
    <KeepLogFile>False</KeepLogFile>
    <DisableCodeBlockComponent>False</DisableCodeBlockComponent>
    <CleanIntermediates>True</CleanIntermediates>
    <HelpFileVersion>1.1.0</HelpFileVersion>
    <MaximumGroupParts>2</MaximumGroupParts>
    <NamespaceGrouping>True</NamespaceGrouping>
    <SyntaxFilters>C#, Visual Basic, Managed C++</SyntaxFilters>
    <SdkLinkTarget>Blank</SdkLinkTarget>
    <RootNamespaceTitle>NerdyDuck.ParameterValidation namespaces</RootNamespaceTitle>
    <RootNamespaceContainer>True</RootNamespaceContainer>
    <PresentationStyle>Markdown</PresentationStyle>
    <Preliminary>False</Preliminary>
    <NamingMethod>Guid</NamingMethod>
    <HelpTitle>NerdyDuck.ParameterValidation Reference</HelpTitle>
    <FooterText>Licensed under the Apache License, Version 2.0</FooterText>
    <FeedbackEMailLinkText>Daniel Kopp</FeedbackEMailLinkText>
    <FeedbackEMailAddress>dak%40nerdyduck.de</FeedbackEMailAddress>
    <CopyrightText>Copyright %28c%29 Daniel Kopp 2015</CopyrightText>
    <CopyrightHref>https://www.nerdyduck.de</CopyrightHref>
    <ContentPlacement>AboveNamespaces</ContentPlacement>
    <VisibleItems>Attributes, ExplicitInterfaceImplementations, InheritedMembers, InheritedFrameworkMembers, Protected, ProtectedInternalAsProtected</VisibleItems>
    <MissingTags>Summary, Parameter, Returns, Value, AutoDocumentCtors, Namespace, TypeParameter, AutoDocumentDispose</MissingTags>
    <ProjectSummary>The NerdyDuck.ParameterValidation library contains 2 namespaces. The %2aNerdyDuck.ParameterValidation%2a namespace contains the classes necessary to serialize and deserialize arvitrary values, and to validate the values using constraints. The %2aNerdyDuck.ParameterValidation.Constraints%2a namespace contains a set of constraint classes to validate values of a range of data types.</ProjectSummary>
    <DocumentationSources>
      <DocumentationSource sourceFile="..\..\src\ParameterValidationDesktop\ParameterValidationDesktop.csproj" />
    </DocumentationSources>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="NerdyDuck.ParameterValidation.Constraints" isDocumented="True">The *NerdyDuck.ParameterValidation.Constraints* namespace contains a set of classes derived from `Constraint` to validate values of one or several data types, e.g. the `MinimumValueConstraint` can assert that a value of any of the integer types or the decimal type, has at least the minimum value specified in the constraint. Consult the descriptions of the specific constraint for a list of supported data types.</NamespaceSummaryItem>
      <NamespaceSummaryItem name="NerdyDuck.ParameterValidation" isDocumented="True">The *NerdyDuck.ParameterValidation* namespace contains the classes necessary to validate and serialize. The `ParameterValidator` class lets you apply one or more constraints derived from the `Constraint` class to an arbitrary value to determine if the value complies to the set of constraints. The supported types of values can be found in the `ParameterDataType` enumeration. The `ConstraintParser` class reads a set of constraints in a string and generates a list of objects derived from `Constraint`. The class also provides a method to serialize a list of constraints into a string. The `ParameterConvert` class provides methods to serialize and deserialize values, in most cases using the `System.Xml.XmlConvert` class.</NamespaceSummaryItem>
      <NamespaceSummaryItem name="NerdyDuck.CodedExceptions (Group)" isGroup="True" isDocumented="False" />
      <NamespaceSummaryItem name="NerdyDuck.CodedExceptions" isDocumented="False" />
      <NamespaceSummaryItem name="NerdyDuck.CodedExceptions.IO" isDocumented="False" />
    </NamespaceSummaries>
    <PlugInConfigurations />
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in order for Visual Studio to perform
			 the build.  The others are optional common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <ItemGroup>
    <Folder Include="Content" />
    <Folder Include="Content\VersionHistory" />
    <Folder Include="icons" />
    <Folder Include="media" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Content\VersionHistory\v1.0.0.aml" />
    <None Include="Content\VersionHistory\v1.0.1.aml" />
    <None Include="Content\VersionHistory\v1.1.0.aml" />
    <None Include="Content\VersionHistory\VersionHistory.aml" />
    <None Include="Content\Welcome.aml" />
    <None Include="MoveToWiki.ps1" />
  </ItemGroup>
  <ItemGroup>
    <ContentLayout Include="ContentLayout.content" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="icons\Help.png" />
  </ItemGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
  <!-- The pre-build and post-build event properties must appear *after* the targets file import in order to be
			 evaluated correctly. -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>if '$(Configuration)' == 'Release' powershell -ExecutionPolicy Bypass -Command ".\MoveToWiki.ps1"</PostBuildEvent>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
  </PropertyGroup>
</Project>